@{
    ViewData["Title"] = "Random User Generator";
}

<div class="container mt-5">
    <h1>Random User Generator</h1>

    <div class="row mb-4">
        <div class="col-md-3">
            <label for="region">Region:</label>
            <select id="region" class="form-control" onchange="resetTable()" name="region">
                <option value="USA">USA</option>
                <option value="France">France</option>
                <option value="Germany">Germany</option>
                <option value="Italy">Italy</option>
                <option value="Brazil">Brazil</option>
                <option value="Korea">Korea</option>
                <option value="China">China</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="errorsSlider">Errors per Record (0 to 1000):</label>
            <input type="range" id="errorsSlider" class="form-range" min="0" max="1000" step="1" value="0" oninput="updateErrorDisplay(); resetTable()">
            <div id="errorValueDisplay" class="mt-2">0</div> <!-- Error display element -->
        </div>
        <div class="col-md-3">
            <label for="seed">Seed Value:</label>
            <input type="number" id="seed" class="form-control" value="123456" oninput="resetTable()">
            <button id="randomSeedBtn" class="btn btn-primary mt-2" onclick="generateRandomSeed()">Generate Random Seed</button>
        </div>
    </div>

    <table class="table table-striped table-bordered" id="userTable">
        <thead class="thead-dark">
            <tr>
                <th>#</th>
                <th>Id</th>
                <th>Name</th>
                <th>Address</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            <!-- Users will be appended here -->
        </tbody>
    </table>

    <div id="loading" class="text-center" style="display:none;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading more users...</p>
    </div>
</div>

<script>
    let page = 1;
    const regionSelect = document.getElementById('region');
    const errorsSlider = document.getElementById('errorsSlider');
    const seedInput = document.getElementById('seed');
    const randomSeedBtn = document.getElementById('randomSeedBtn');
    const userTable = document.getElementById('userTable').getElementsByTagName('tbody')[0];
    const loadingDiv = document.getElementById('loading');
    const errorValueDisplay = document.getElementById('errorValueDisplay');

    // Load users from the server
    function loadUsers() {
        const region = regionSelect.value;
        const errors = parseInt(errorsSlider.value); // Changed to parseInt for proper error handling
        const seed = parseInt(seedInput.value) + (page - 1); // Combine seed with page number

        fetch(`/Home/GetUsers?region=${region}&count=20&errors=${errors}&seed=${seed}`)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                data.forEach((user, index) => {
                    const row = `
                                        <tr>
                                            <td>${(page - 1) * 20 + index + 1}</td>
                                            <td>${user.identifier}</td>
                                            <td>${user.name}</td>
                                            <td>${user.address}</td>
                                            <td>${user.phoneNumber}</td>
                                        </tr>`;
                    userTable.innerHTML += row;
                });
                loadingDiv.style.display = 'none';
                page++;
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function resetTable() {
        page = 1;
        userTable.innerHTML = '';
        loadUsers();
    }

    // Update error display from slider
    function updateErrorDisplay() {
        errorValueDisplay.textContent = errorsSlider.value; // Update the displayed value
    }

    // Change region or seed
    regionSelect.addEventListener('change', resetTable);
    seedInput.addEventListener('input', resetTable);

    // Generate random seed
    function generateRandomSeed() {
        const randomSeed = Math.floor(Math.random() * 1000000);
        seedInput.value = randomSeed;
        resetTable();
    }

    // Infinite scroll
    window.addEventListener('scroll', function () {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
            loadingDiv.style.display = 'block';
            loadUsers();
        }
    });

    // Initial load
    loadUsers();
</script>
